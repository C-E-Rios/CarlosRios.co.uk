@mixin display-table(){
    height: 100%;
    width: 100%;
    display: table;    
}

@mixin display-table-cell(){
    width: 100%;
    display: table-cell;
    vertical-align: middle;
}

@mixin vertical-align($position: relative) {
  position: $position;
  top: 50%;
  transform: translateY(-50%);
}

@mixin vertical-align-flex() {
    display: flex;
    flex-direction: column;
    justify-content: center;    
}

///
@mixin full-height-flex() {
    height: 100vh;
    display: flex;
    align-items: center;
    flex-direction: row; 
}

@mixin full-height() {
    position: absolute;
    height: 100%; width: 100%;
    top: 0; bottom: 0;
}

/// Media query merger
/// Create a single media condition out of a map of queries
/// @param {Map} $queries - Map of media queries
@mixin media($queries) {
   
    @if length($queries) == 0 {
        @content;
    } @else {
        $first-key: nth(map-keys($queries), 1);

        @media ($first-key: map-get($queries, $first-key)) {
            $queries: map-remove($queries, $first-key);

            @include media($queries) {
                @content;
            }
        }
    }
}

/// Responsive breakpoint manager
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
@mixin respond-to($breakpoint) {
    // Get the query map for $breakpoints map
    $queries: map-get($media-breakpoints, $breakpoint);

    // If there is no query called $breakpoint in map, throw an error
    @if not $queries {
        @error "No value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
    }

    // Include the media mixin with $queries
    @include media($queries) {
        @content;
    }
}

/// https://claudiordgz.com/responsive-typography-using-modular-scale/
@mixin font-respond-to($media) {
    @if not map-contains($media-types, $media) {
        @warn "#{$media} is not a known media type. Using large-desktop instead.";
        $media: large-desktop;
    }
    @media #{map-get($media-types, $media)} {
        @content;
    }
}

/* Now it is time to join the responsive functionality with modular scale.
 * @param {number} $default the default modular scale
 * @param {number} $phone For sizes below 480px
 * @param {number} $tablet-portrait Sizes bigger than phone but smaller than 768px
 * @param {number} $tablet-landscape Bigger than portrait smaller than 1200px
 * @param {number} $desktop Bigger than landscape tablet, smaller than 1080p width
 * @param {number} $large-desktop Anything bigger than 1080p for now */
@mixin fontMultiScreen($default, $phone, $tablet-portrait, $tablet-landscape, $desktop, $large-desktop) {
    font-size: ms($default);
    @include font-respond-to(phone) {
        font-size: ms($phone);
    }
    @include font-respond-to(tablet-portrait) {
        font-size: ms($tablet-portrait);
    }
    @include font-respond-to(tablet-landscape-desktop) {
        font-size: ms($tablet-landscape);
    }
    @include font-respond-to(desktop) {
        font-size: ms($desktop);
    }
    @include font-respond-to(large-desktop) {
        font-size: ms($large-desktop);
    }
}

/* A wrapper for lists.
 * @param {number[]} $propertiesList the ordered array according to the parameters shown above */
@mixin mapTypeList($propertiesList) {
    @include fontMultiScreen( 
        nth($propertiesList, 1),
        nth($propertiesList, 2),
        nth($propertiesList, 3),
        nth($propertiesList, 4),
        nth($propertiesList, 5),
        nth($propertiesList, 6)
    );
}